# name: test/sql/settings/per_table_settings.test
# description: Test per-table settings
# group: [settings]

require ducklake

require parquet

statement ok
ATTACH 'ducklake:__TEST_DIR__/ducklake_per_table_settings.db' AS ducklake (DATA_PATH '__TEST_DIR__/ducklake_per_table_settings_files');

# test different settings per schema/table
statement ok
CREATE TABLE ducklake.t1(str VARCHAR)

statement ok
CREATE TABLE ducklake.t2(str VARCHAR)

statement ok
CREATE SCHEMA ducklake.s1;

statement ok
CREATE TABLE ducklake.s1.t1(str VARCHAR);

statement ok
CREATE TABLE ducklake.s1.t2(str VARCHAR);

# global default -> uncompressed
statement ok
CALL ducklake.set_option('parquet_compression', 'uncompressed')

# t1 -> zstd
statement ok
CALL ducklake.set_option('parquet_compression', 'zstd', table_name => 't1')

# schema s1 -> lz4
statement ok
CALL ducklake.set_option('parquet_compression', 'lz4', schema => 's1')

# s1.t1 -> gzip
statement ok
CALL ducklake.set_option('parquet_compression', 'gzip', schema => 's1', table_name => 't1')

# non-existent schema/table
statement error
CALL ducklake.set_option('parquet_compression', 'gzip', table_name => 'nonexistent_table')
----
nonexistent_table

statement error
CALL ducklake.set_option('parquet_compression', 'gzip', schema => 'nonexistent_schema')
----
nonexistent_schema

loop i 0 2

# t1 uses zstd (table-specific setting)
query I
INSERT INTO ducklake.t1 SELECT 'hello world' || i str FROM range(1000) t(i)
----
1000

query I
SELECT DISTINCT compression FROM parquet_metadata('__TEST_DIR__/ducklake_per_table_settings_files/main/t1/**') ORDER BY ALL
----
ZSTD

# t2 uses uncompressed (global setting)
query I
INSERT INTO ducklake.t2 SELECT 'hello world' || i str FROM range(1000) t(i)
----
1000

query I
SELECT DISTINCT compression FROM parquet_metadata('__TEST_DIR__/ducklake_per_table_settings_files/main/t2/**') ORDER BY ALL
----
UNCOMPRESSED

# s1.t1 uses gzip (table-specific setting)
query I
INSERT INTO ducklake.s1.t1 SELECT 'hello world' || i str FROM range(1000) t(i)
----
1000

query I
SELECT DISTINCT compression FROM parquet_metadata('__TEST_DIR__/ducklake_per_table_settings_files/s1/t1/**') ORDER BY ALL
----
GZIP

# s1.t2 uses lz4 (schema-specific setting)
query I
INSERT INTO ducklake.s1.t2 SELECT 'hello world' || i str FROM range(1000) t(i)
----
1000

query I
SELECT DISTINCT compression FROM parquet_metadata('__TEST_DIR__/ducklake_per_table_settings_files/s1/t2/**') ORDER BY ALL
----
LZ4_RAW

# all these options are persisted - restart and do it again
statement ok
DETACH ducklake

statement ok
ATTACH 'ducklake:__TEST_DIR__/ducklake_per_table_settings.db' AS ducklake (DATA_PATH '__TEST_DIR__/ducklake_per_table_settings_files');

endloop

# global option retrieval
query IIII
SELECT name, value, type, description FROM ducklake.get_option() WHERE name = 'parquet_compression'
----
parquet_compression	uncompressed	user	Compression algorithm for Parquet files (uncompressed, snappy, gzip, zstd, brotli, lz4)

# schema-scoped option retrieval (s1 should return lz4)
query IIII
SELECT name, value, type, description FROM ducklake.get_option(schema => 's1') WHERE name = 'parquet_compression'
----
parquet_compression	lz4	user	Compression algorithm for Parquet files (uncompressed, snappy, gzip, zstd, brotli, lz4)

# table-scoped option retrieval (t1 should return zstd - table-specific setting)
query IIII
SELECT name, value, type, description FROM ducklake.get_option(table_name => 't1') WHERE name = 'parquet_compression'
----
parquet_compression	zstd	user	Compression algorithm for Parquet files (uncompressed, snappy, gzip, zstd, brotli, lz4)

# table-scoped option retrieval (t2 should return uncompressed - global setting)
query IIII
SELECT name, value, type, description FROM ducklake.get_option(table_name => 't2') WHERE name = 'parquet_compression'
----
parquet_compression	uncompressed	user	Compression algorithm for Parquet files (uncompressed, snappy, gzip, zstd, brotli, lz4)

# schema + Table scoped option retrieval (s1.t1 should return gzip - table-specific setting)
query IIII
SELECT name, value, type, description FROM ducklake.get_option(schema => 's1', table_name => 't1') WHERE name = 'parquet_compression'
----
parquet_compression	gzip	user	Compression algorithm for Parquet files (uncompressed, snappy, gzip, zstd, brotli, lz4)

# schema + Table scoped option retrieval (s1.t2 should return lz4 - schema-specific setting)
query IIII
SELECT name, value, type, description FROM ducklake.get_option(schema => 's1', table_name => 't2') WHERE name = 'parquet_compression'
----
parquet_compression	lz4	user	Compression algorithm for Parquet files (uncompressed, snappy, gzip, zstd, brotli, lz4)

# using get_option_by_name for specific option filtering
query IIII
SELECT name, value, type, description FROM ducklake.get_option_by_name('parquet_compression')
----
parquet_compression	uncompressed	user	Compression algorithm for Parquet files (uncompressed, snappy, gzip, zstd, brotli, lz4)

# using get_option_by_name with schema scope
query IIII
SELECT name, value, type, description FROM ducklake.get_option_by_name('parquet_compression', schema => 's1')
----
parquet_compression	lz4	user	Compression algorithm for Parquet files (uncompressed, snappy, gzip, zstd, brotli, lz4)

# using get_option_by_name with table scope
query IIII
SELECT name, value, type, description FROM ducklake.get_option_by_name('parquet_compression', table_name => 't1')
----
parquet_compression	zstd	user	Compression algorithm for Parquet files (uncompressed, snappy, gzip, zstd, brotli, lz4)

# using get_option_by_name with schema + table scope
query IIII
SELECT name, value, type, description FROM ducklake.get_option_by_name('parquet_compression', schema => 's1', table_name => 't1')
----
parquet_compression	gzip	user	Compression algorithm for Parquet files (uncompressed, snappy, gzip, zstd, brotli, lz4)

# error handling - non-existent table
statement error
SELECT * FROM ducklake.get_option(table_name => 'nonexistent_table')
----
nonexistent_table

# error handling - non-existent schema
statement error
SELECT * FROM ducklake.get_option(schema => 'nonexistent_schema')
----
nonexistent_schema

# for s1.t1, we should get gzip (table-specific) not lz4 (schema-specific)
query I
SELECT value FROM ducklake.get_option(schema => 's1', table_name => 't1') WHERE name = 'parquet_compression'
----
gzip

# for s1.t2, we should get lz4 (schema-specific) not uncompressed (global)
query I
SELECT value FROM ducklake.get_option(schema => 's1', table_name => 't2') WHERE name = 'parquet_compression'
----
lz4

# verify that get_option_by_name returns empty result for non-existent option
query I
SELECT COUNT(*) FROM ducklake.get_option_by_name('non_existent_option')
----
0
